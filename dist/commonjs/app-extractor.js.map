{"version":3,"sources":["app-extractor.js"],"names":[],"mappings":";;;;;;;;;;;;wBAAmB,UAAU;;;;QAEtB,gBAAgB;;QAChB,SAAS;;sBAEG,SAAS;;;;AAC5B,IAAI,OAAO,GAAG,oBAAO,OAAO,CAAC;;IAEhB,YAAY;AAKZ,WALA,YAAY,CAKX,OAAO,EAAC;0BALT,YAAY;;AAMrB,QAAI,CAAC,OAAO,GAAG,OAAO,CAAC;GACxB;;eAPU,YAAY;;WAgBP,0BAAC,QAAQ,EAAC;;;AAIxB,qCAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,EAAE;AAC9B,8BAAO,MAAM,CAAC;AACZ,mBAAS,EAAE,IAAI;AACf,sBAAY,EAAE,OAAO;AACrB,wBAAc,EAAE;AACd,mBAAO,EAAE,CAAC;WACX;AACD,iBAAO,EAAC;AACN,eAAG,EAAE,MAAK,OAAO,GAAC,OAAO;WAC1B;SACF,CAAC,CAAC;OACJ,CAAC,CAAC,IAAI,CAAC,YAAI;AACV,YAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;AAEpC,eAAO,+BAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,EAAE;AACrC,cAAI,SAAS,GAAG,EAAE,CAAC;AACnB,eAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;AAC7C,gBAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,gBAAG,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;WACrC;AACD,iBAAO,SAAS,CAAC;SAClB,CAAC,CAAC;OACJ,CAAC,CAAC;KAEJ;;;SA5CU,YAAY;;;QAAZ,YAAY,GAAZ,YAAY","file":"app-extractor.js","sourceRoot":"/source/","sourcesContent":["import System from \"systemjs\";\n\nimport \"babel/polyfill\";\nimport \"core-js\";\n\nimport corejs from \"core-js\";\nvar Promise = corejs.Promise;\n\nexport class AppExtractor{\n\n  /**\n   * Configure systemjs to work with the local application\n   */\n  constructor(appPath){\n    this.appPath = appPath;\n  }\n\n  /**\n   * Gets the routes from a module.\n   * The module should export the routes array as a variable.\n   *\n   * @param moduleId    id of the module to load.\n   * @returns {Promise}\n   */\n  getNavFromRoutes(moduleId){\n\n    //prepare for use in windows\n\n    System.import(\"config\").then(m=>{\n      System.config({\n        \"baseURL\": \"./\",\n        \"transpiler\": 'babel',\n        \"babelOptions\": {\n          \"stage\": 0\n        },\n        \"paths\":{\n          \"*\": this.appPath+\"/*.js\"\n        }\n      });\n    }).then(()=>{\n      if(!moduleId) Promise.resolve(null);\n      //get routes from the aurelia application\n      return System.import(moduleId).then(m=>{\n        var navRoutes = [];\n        for(var i = 0, l = m.routes.length; i < l; i++){\n          var route = m.routes[i];\n          if(route.nav) navRoutes.push(route);\n        }\n        return navRoutes;\n      });\n    });\n\n  }\n}\n"]}
{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"/source/","sourcesContent":["import through from 'through2';\r\nimport gutil from \"gulp-util\";\r\nimport _ from \"lodash\";\r\nimport fs from \"graceful-fs\";\r\nimport jsdom from \"jsdom\";\r\nimport $ from \"jquery\";\r\n\r\nimport {hashFromString,mergeHash,replaceEmpty,transformText} from \"./helpers\";\r\nimport path from \"path\";\r\nimport File from \"vinyl\";\r\nimport {AppExtractor} from \"./app-extractor\";\r\n\r\nimport corejs from \"core-js\";\r\nvar Promise = corejs.Promise;\r\n\r\nvar PluginError = gutil.PluginError;\r\n\r\nconst PLUGIN_NAME = \"aurelia-i18next-parser\";\r\n\r\nexport class Parser{\r\n\r\n  verbose = false;\r\n  defaultNamespace ='translation';\r\n  functions = ['t'];\r\n  namespaceSeparator = \":\";\r\n  translation_attribute = \"data-i18n\";\r\n  image_src = \"data-src\";\r\n  keySeparator = \".\";\r\n  regex = null;\r\n  appPath = null;\r\n  localesPath = \"src/locales\";\r\n  routesModuleId = \"routes\";\r\n  locales = ['en-US'];\r\n  defaultLocale = \"en\";\r\n\r\n  registry = [];\r\n  values = {};\r\n  nodes = {};\r\n\r\n  constructor(opts){\r\n    if(opts) Object.assign(this,opts);\r\n\r\n    if(this.appPath) this.extractor = new AppExtractor(this.appPath);\r\n  }\r\n\r\n  parse(){\r\n    return this.stream = through.obj(this.transformFile.bind(this), this.flush.bind(this));\r\n  }\r\n\r\n  /**\r\n   * Figures out how to parse the data based on file extension.\r\n   *\r\n   * @param path          path to the file\r\n   * @param data          data of the file\r\n   * @returns {Promise}   resolved when data has been parsed\r\n   */\r\n  parseTranslations(path,data){\r\n    var ext = this.getExtension(path);\r\n    switch(ext){\r\n      case 'html':\r\n        if(this.verbose) gutil.log(\"parse HTML:\",path);\r\n        return this.parseHTML(data);\r\n      default:\r\n        if(this.verbose) gutil.log(\"parse JS:\",path);\r\n        return this.parseJavaScript(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract translations from javascript code.\r\n   *\r\n   * @param data          javascript code as a string\r\n   * @returns {Promise}   resolved when data has been parsed\r\n   */\r\n  parseJavaScript(data){\r\n\r\n    var fnPattern = '(?:' + this.functions.join(')|(?:').replace('.', '\\\\.') + ')';\r\n    var pattern = '[^a-zA-Z0-9_](?:' + fnPattern + ')(?:\\\\(|\\\\s)\\\\s*(?:(?:\\'((?:(?:\\\\\\\\\\')?[^\\']*)+[^\\\\\\\\])\\')|(?:\"((?:(?:\\\\\\\\\")?[^\"]*)+[^\\\\\\\\])\"))';\r\n    var functionRegex = new RegExp(this.regex || pattern, 'g');\r\n    var matches;\r\n    var keys = [];\r\n\r\n    while(( matches = functionRegex.exec(data) )){\r\n      // the key should be the first truthy match\r\n      for(var i of matches){\r\n        if(i > 0 && matches[i]) keys.push(matches[i]);\r\n      }\r\n    }\r\n\r\n    return Promise.resolve(keys);\r\n  }\r\n\r\n  /**\r\n   * Extract translations from html markup.\r\n   *\r\n   * @param data          html markup as a string\r\n   * @returns {Promise}   resolved when data has been parsed\r\n   */\r\n  parseHTML(data){\r\n    return new Promise((resolve, reject) =>{\r\n      jsdom.env({\r\n        html: data,\r\n        done: (errors, window)=>{\r\n          if(errors){\r\n            //throw new new PluginError(PLUGIN_NAME, 'Streams are not supported!');\r\n            gutil.log(errors);\r\n            reject(errors);\r\n            return;\r\n          }\r\n          resolve(this.parseDOM(window,$));\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Extract translations from html markup.\r\n   *\r\n   * @param window          a jsdom window\r\n   * @param $               jquery\r\n   * @returns {Array}       extracted keys\r\n   */\r\n  parseDOM(window,$){\r\n    $ = $(window);\r\n    var keys = [];\r\n    var selector = `[${this.translation_attribute}]`;\r\n    var nodes = $(selector);\r\n\r\n    nodes.each(i=>{\r\n      var node = nodes.eq(i);\r\n      var value,key,m;\r\n\r\n      key = node.attr(this.translation_attribute);\r\n\r\n      var attr = \"text\";\r\n      //set default attribute to src if this is an image node\r\n      if(node[0].nodeName===\"IMG\") attr = \"src\";\r\n\r\n      var re = /\\[([a-z]*)]/g;\r\n      //check if a attribute was specified in the key\r\n      while ((m = re.exec(key)) !== null) {\r\n        if (m.index === re.lastIndex) {\r\n          re.lastIndex++;\r\n        }\r\n        if(m){\r\n          key = key.replace(m[0],'');\r\n          attr = m[1];\r\n        }\r\n      }\r\n\r\n      switch(node[0].nodeName){\r\n        case \"IMG\":\r\n          value = node.attr(this.image_src);\r\n          break;\r\n        default:\r\n          switch(attr){\r\n            case 'text':\r\n              value = node.text().trim();\r\n              break;\r\n            case 'prepend':\r\n              value = node.html().trim();\r\n              break;\r\n            case 'append':\r\n              value = node.html().trim();\r\n              break;\r\n            case 'html':\r\n              value = node.html().trim();\r\n              break;\r\n            default: //custom attribute\r\n              value = node.attr(attr);\r\n              break;\r\n          }\r\n      }\r\n\r\n      //skip keys with interpolations\r\n      if(key.indexOf(\"${\") > -1){\r\n        return;\r\n      }\r\n\r\n      // remove the backslash from escaped quotes\r\n      key = key.replace(/\\\\('|\")/g, '$1');\r\n\r\n      // remove the optional attribute\r\n      key = key.replace(/\\[[a-z]*]/g, '');\r\n\r\n      if(!key) key = value;\r\n      keys.push(key);\r\n      this.values[key] = value;\r\n      this.nodes[key] = node;\r\n    });\r\n\r\n    return keys;\r\n  }\r\n\r\n  /**\r\n   * Parse and add keys to the registry.\r\n   * @param keys\r\n   */\r\n  addToRegistry(keys){\r\n    for(let key of keys){\r\n      // remove the backslash from escaped quotes\r\n      key = key.replace(/\\\\('|\")/g, '$1');\r\n\r\n      if(key.indexOf(this.namespaceSeparator) === -1){\r\n        key = this.defaultNamespace + this.keySeparator + key;\r\n      }else{\r\n        key = key.replace(this.namespaceSeparator, this.keySeparator);\r\n      }\r\n\r\n      this.registry.push(key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate translation files from the current registry entries.\r\n   *\r\n   * @param locale\r\n   */\r\n  generateTranslation(locale){\r\n\r\n    var mergedTranslations, currentTranslations, oldTranslations, key;\r\n\r\n    this.registryHash = {};\r\n\r\n    // turn the array of keys\r\n    // into an associative object\r\n    // ==========================\r\n    for(var i = 0, l = this.registry.length; i < l; i++){\r\n      key = this.registry[i];\r\n      this.registryHash = hashFromString(key, '', this.keySeparator, this.registryHash);\r\n    }\r\n\r\n    for(var namespace in this.registryHash){\r\n      if(!this.registryHash.hasOwnProperty(namespace)) continue;\r\n\r\n      // get previous version of the files\r\n      var namespacePath = namespace + '.json';\r\n      var namespaceOldPath = namespace + '_old.json';\r\n\r\n      var basePath = process.cwd()+\"/\"+this.localesPath+\"/\"+locale+\"/\";\r\n      if(this.verbose) gutil.log('basePath', basePath);\r\n\r\n      if(fs.existsSync(basePath+namespacePath)){\r\n        try{\r\n          currentTranslations = JSON.parse(fs.readFileSync(basePath+namespacePath));\r\n        }catch(error){\r\n          this.emit('json_error', error.name, error.message);\r\n          currentTranslations = {};\r\n        }\r\n      }else{\r\n        currentTranslations = {};\r\n      }\r\n\r\n      if(fs.existsSync(basePath+namespaceOldPath)){\r\n        try{\r\n          oldTranslations = JSON.parse(fs.readFileSync(basePath+namespaceOldPath));\r\n        }\r\n        catch(error){\r\n          this.emit('json_error', error.name, error.message);\r\n          currentTranslations = {};\r\n        }\r\n      }\r\n      else{\r\n        oldTranslations = {};\r\n      }\r\n\r\n      // merges existing translations with the new ones\r\n      mergedTranslations = mergeHash(currentTranslations, Object.assign({}, this.registryHash[namespace]));\r\n\r\n      // restore old translations if the key is empty\r\n      mergedTranslations.new = replaceEmpty(oldTranslations, mergedTranslations.new);\r\n\r\n      var transform = null;\r\n      //transform values found in the html to uppercase if this is not the default language\r\n      if(locale !== this.defaultLocale) transform = \"uppercase\";\r\n\r\n      mergedTranslations.new = this.getValuesFromHash(this.valuesHash, mergedTranslations.new,transform,this.nodesHash,this.valuesHash);\r\n\r\n      // merges former old translations with the new ones\r\n      mergedTranslations.old = _.extend(oldTranslations, mergedTranslations.new);\r\n\r\n      // push files back to the stream\r\n      var mergedTranslationsFile = new File({\r\n        path: locale+\"/\"+namespacePath,\r\n        //base: locale,\r\n        contents: new Buffer(JSON.stringify(mergedTranslations.new, null, 2))\r\n      });\r\n      var mergedOldTranslationsFile = new File({\r\n        path: locale+\"/\"+namespaceOldPath,\r\n        //base: locale,\r\n        contents: new Buffer(JSON.stringify(mergedTranslations.old, null, 2))\r\n      });\r\n\r\n      /*if(this.verbose){\r\n        gutil.log('writing', locale+\"/\"+namespacePath);\r\n        gutil.log('writing', locale+\"/\"+namespaceOldPath);\r\n      }*/\r\n\r\n      this.stream.push(mergedTranslationsFile);\r\n      this.stream.push(mergedOldTranslationsFile);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Generate translations for all locales from the registry\r\n   */\r\n  generateAllTranslations(){\r\n    this.updateHashes();\r\n\r\n    if(this.verbose) {\r\n      gutil.log('extracted registry:');\r\n      gutil.log(this.registry);\r\n    }\r\n\r\n    for(var i = 0, l = this.locales.length; i < l; i++){\r\n      this.generateTranslation(this.locales[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract translations from the Aurelia app.\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  extractFromApp(){\r\n   return this.extractor.getNavFromRoutes(this.routesModuleId)\r\n    .then(navRoutes=>{\r\n        if(!navRoutes) return null;\r\n\r\n        for(var i = 0, l = navRoutes.length; i < l; i++){\r\n          var item = navRoutes[i];\r\n          this.values[item.i18n] = item.title;\r\n          this.registry.push(this.defaultNamespace + this.keySeparator + item.i18n);\r\n        }\r\n\r\n        if(this.verbose){\r\n          gutil.log('navRoutes found:');\r\n          gutil.log(navRoutes)\r\n        }\r\n\r\n        return null;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Takes a `target` hash and replace its empty\r\n   * values with the `source` hash ones if they exist\r\n   *\r\n   * @param source\r\n   * @param target\r\n   * @param transform\r\n   * @param nodesHash\r\n   * @param valuesHash\r\n   * @returns {*|{}}\r\n   */\r\n  getValuesFromHash(source, target,transform,nodesHash,valuesHash){\r\n    target = target || {};\r\n\r\n    Object.keys(source).forEach((key)=>{\r\n\r\n      var node = null;\r\n      if(nodesHash) node = nodesHash[key];\r\n      var value;\r\n\r\n      if(target[key] !== undefined){\r\n        if(typeof source[key] === 'object'){\r\n          target[key] = this.getValuesFromHash(source[key], target[key], transform, node,(valuesHash)? valuesHash[key] : valuesHash);\r\n        }else if(target[key] === ''){\r\n          if(!node) {\r\n            //try to find in values\r\n            if(valuesHash)value = valuesHash[key];\r\n            if(transform === \"uppercase\") value = transformText(value);\r\n          }else{\r\n            value = source[key];\r\n            if(transform === \"uppercase\" && node[0].nodeName !== \"IMG\") value = transformText(value);\r\n          }\r\n          target[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /**\r\n   * Get the file extension from a filepath.\r\n   *\r\n   * @param path        path to analyze\r\n   * @returns {string}  the extracted file extension\r\n   */\r\n  getExtension(path){\r\n    return path.substr(path.lastIndexOf(\".\") + 1);\r\n  }\r\n\r\n  /**\r\n   * Update hashes.\r\n   */\r\n  updateHashes(){\r\n\r\n    this.translationsHash = {};\r\n    this.valuesHash = {};\r\n    this.nodesHash = {};\r\n\r\n    var key;\r\n\r\n    // remove duplicate keys\r\n    this.translations = _.uniq(this.translations).sort();\r\n\r\n    //create hash for values\r\n    for(key in this.values){\r\n      if(!this.values.hasOwnProperty(key)) continue;\r\n      this.valuesHash = hashFromString(key, this.values[key], this.keySeparator, this.valuesHash);\r\n    }\r\n    //create hash for nodes\r\n    for(key in this.nodes){\r\n      if(!this.nodes.hasOwnProperty(key)) continue;\r\n      this.nodesHash = hashFromString(key, this.nodes[key], this.keySeparator, this.nodesHash);\r\n    }\r\n  }\r\n\r\n  //--------- Steam functions\r\n\r\n  transformFile(file, encoding, cb) {\r\n\r\n    var data,path;\r\n\r\n    // we do not handle streams\r\n    if (file.isStream()) {\r\n      this.emit('error', new PluginError(PLUGIN_NAME, 'Streams are not supported!'));\r\n      return cb();\r\n    }\r\n\r\n    //read the file manually if a filepath was passed.\r\n    if(file.isNull()){\r\n      path = file.path;\r\n      if(file.stat.isDirectory()){\r\n        return cb();\r\n      }else if(path && fs.existsSync(path)){\r\n        data = fs.readFileSync(path);\r\n      }else{\r\n        this.emit(\"error\", new PluginError(PLUGIN_NAME, \"File has no content and is not readable\"));\r\n        return cb();\r\n      }\r\n    }\r\n\r\n    if (file.isBuffer()) {\r\n      path = file.path.replace(process.cwd()+\"/\",\"\");\r\n      data = file.contents.toString();\r\n    }\r\n\r\n    //skip if no data was found\r\n    if(!data) return cb();\r\n\r\n    data = this.parseTranslations(path,data).then(keys=>{\r\n      this.addToRegistry(keys);\r\n      // tell the stream engine that we are done with this file\r\n      cb();\r\n    });\r\n\r\n    // make sure the file goes through the next gulp plugin\r\n    //this.push(file);\r\n  }\r\n\r\n  flush(cb){\r\n    //extract values from the aurelia application where possible\r\n    if(this.extractor){\r\n      this.extractFromApp().then(()=>{\r\n        this.generateAllTranslations();\r\n        cb();\r\n      });\r\n    }else{\r\n      this.generateAllTranslations();\r\n      cb();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The main plugin function\r\n *\r\n * @param opts\r\n * @returns {Stream}\r\n */\r\nexport function i18next(opts) {\r\n  return new Parser(opts).parse();\r\n}\r\n"]}
{"version":3,"sources":["helpers.js"],"names":[],"mappings":"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","file":"helpers.js","sourceRoot":"/source/","sourcesContent":["/**\r\n * Create a hash from a translation key.\r\n *\r\n * converts \"foo.bar.baz\" to:\r\n *\r\n * foo:{\r\n *   bar: {\r\n *     baz: {\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * @param path\r\n * @param value\r\n * @param separator\r\n * @param hash\r\n * @returns {*|{}}\r\n */\r\nexport function hashFromString(path, value, separator, hash){\r\n  separator = separator || '.';\r\n\r\n  if(path.indexOf(separator, path.length - separator.length) >= 0){\r\n    path = path.slice(0, -separator.length);\r\n  }\r\n\r\n  var parts = path.split(separator);\r\n  var tmp_obj = hash || {};\r\n  var obj = tmp_obj;\r\n\r\n  for(var x = 0; x < parts.length; x++){\r\n    if(x === parts.length - 1){\r\n      tmp_obj[parts[x]] = value;\r\n    }\r\n    else if(!tmp_obj[parts[x]]){\r\n      tmp_obj[parts[x]] = {};\r\n    }\r\n    tmp_obj = tmp_obj[parts[x]];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Takes a `source` hash and make sure its value\r\n * are pasted in the `target` hash, if the target\r\n * hash has the corresponding key. If not, the\r\n * value is added to an `old` hash.\r\n *\r\n * @param source\r\n * @param target\r\n * @param old\r\n * @returns {{new: (*|{}), old: (*|{})}}\r\n */\r\nexport function mergeHash(source, target, old){\r\n  target = target || {};\r\n  old = old || {};\r\n\r\n  Object.keys(source).forEach(function(key){\r\n    if(target[key] !== undefined){\r\n      if(typeof source[key] === 'object' && source[key].constructor !== Array){\r\n        var nested = mergeHash(source[key], target[key], old[key]);\r\n        target[key] = nested.new;\r\n        old[key] = nested.old;\r\n      }\r\n      else{\r\n        target[key] = source[key];\r\n      }\r\n    }\r\n    else{\r\n      // support for plural in keys\r\n      var pluralMatch = /_plural(_\\d+)?$/.test(key);\r\n      var singularKey = key.replace(/_plural(_\\d+)?$/, '');\r\n\r\n      // support for context in keys\r\n      var contextMatch = /_([^_]+)?$/.test(singularKey);\r\n      var rawKey = singularKey.replace(/_([^_]+)?$/, '');\r\n\r\n      if(\r\n        ( contextMatch && target[rawKey] !== undefined ) ||\r\n        ( pluralMatch && target[singularKey] !== undefined )\r\n      ){\r\n        target[key] = source[key];\r\n      }\r\n      else{\r\n        old[key] = source[key];\r\n      }\r\n    }\r\n  });\r\n\r\n  return {\r\n    'new': target,\r\n    'old': old\r\n  };\r\n}\r\n\r\n/**\r\n * Takes a `target` hash and replace its empty\r\n * values with the `source` hash ones if they exist\r\n * @param source\r\n * @param target\r\n * @param transform\r\n * @returns {*|{}}\r\n */\r\nexport function replaceEmpty(source, target,transform){\r\n  target = target || {};\r\n\r\n  Object.keys(source).forEach(function(key){\r\n    if(target[key] !== undefined){\r\n      if(typeof source[key] === 'object'){\r\n        target[key] = replaceEmpty(source[key], target[key],transform);\r\n      }else if(target[key] === ''){\r\n        var value = source[key];\r\n        if(transform===\"uppercase\") value = transformText(value);\r\n        target[key] = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  return target;\r\n}\r\n\r\n/**\r\n * Transforms html text to uppercase without transforming tags or attributes\r\n *\r\n * @param str\r\n * @returns {*}\r\n */\r\nexport function transformText(str){\r\n  var re = /(.*?(?=<)).*?(?=>)>|(.*)?/gim;\r\n  var m;\r\n\r\n  while ((m = re.exec(str)) !== null) {\r\n    if (m.index === re.lastIndex) {\r\n      re.lastIndex++;\r\n    }\r\n    // View your result using the m-variable.\r\n    // eg m[0] etc.\r\n    if(m[1]) str = str.replace(m[1],m[1].toUpperCase());\r\n    if(m[2]) str = str.replace(m[2],m[2].toUpperCase());\r\n  }\r\n  return str;\r\n}\r\n"]}
{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import through from 'through2';\nimport gutil from \"gulp-util\";\nimport _ from \"lodash\";\nimport fs from \"graceful-fs\";\nimport jsdom from \"jsdom\";\nimport $ from \"jquery\";\n\nimport {hashFromString,mergeHash,replaceEmpty,transformText} from \"./helpers\";\nimport path from \"path\";\nimport File from \"vinyl\";\nimport {AppExtractor} from \"./app-extractor\";\n\nimport corejs from \"core-js\";\nvar Promise = corejs.Promise;\n\nvar PluginError = gutil.PluginError;\n\nconst PLUGIN_NAME = \"aurelia-i18next-parse\";\n\nexport class Parser{\n\n  verbose = false;\n  defaultNamespace ='translation';\n  functions = ['t'];\n  namespaceSeparator = \":\";\n  translation_attribute = \"data-i18n\";\n  image_src = \"data-src\";\n  keySeparator = \".\";\n  regex = null;\n  appPath = null;\n  routesModuleId = \"routes\";\n  locales = ['en-US'];\n  defaultLocale = \"en\";\n\n  registry = [];\n  values = {};\n  nodes = {};\n\n  constructor(opts){\n    if(opts) Object.assign(this,opts);\n\n    if(this.appPath) this.extractor = new AppExtractor(this.appPath);\n  }\n\n  parse(){\n    return this.stream = through.obj(this.transformFile.bind(this), this.flush.bind(this));\n  }\n\n  /**\n   * Figures out how to parse the data based on file extension.\n   *\n   * @param path          path to the file\n   * @param data          data of the file\n   * @returns {Promise}   resolved when data has been parsed\n   */\n  parseTranslations(path,data){\n    var ext = this.getExtension(path);\n    switch(ext){\n      case 'html':\n        if(this.verbose) gutil.log(\"parse HTML:\",path);\n        return this.parseHTML(data);\n      default:\n        if(this.verbose) gutil.log(\"parse JS:\",path);\n        return this.parseJavaScript(data);\n    }\n  }\n\n  /**\n   * Extract translations from javascript code.\n   *\n   * @param data          javascript code as a string\n   * @returns {Promise}   resolved when data has been parsed\n   */\n  parseJavaScript(data){\n\n    var fnPattern = '(?:' + this.functions.join(')|(?:').replace('.', '\\\\.') + ')';\n    var pattern = '[^a-zA-Z0-9_](?:' + fnPattern + ')(?:\\\\(|\\\\s)\\\\s*(?:(?:\\'((?:(?:\\\\\\\\\\')?[^\\']*)+[^\\\\\\\\])\\')|(?:\"((?:(?:\\\\\\\\\")?[^\"]*)+[^\\\\\\\\])\"))';\n    var functionRegex = new RegExp(this.regex || pattern, 'g');\n    var matches;\n    var keys = [];\n\n    while(( matches = functionRegex.exec(data) )){\n      // the key should be the first truthy match\n      for(var i of matches){\n        if(i > 0 && matches[i]) keys.push(matches[i]);\n      }\n    }\n\n    return Promise.resolve(keys);\n  }\n\n  /**\n   * Extract translations from html markup.\n   *\n   * @param data          html markup as a string\n   * @returns {Promise}   resolved when data has been parsed\n   */\n  parseHTML(data){\n    return new Promise((resolve, reject) =>{\n      jsdom.env({\n        html: data,\n        done: (errors, window)=>{\n          if(errors){\n            //throw new new PluginError(PLUGIN_NAME, 'Streams are not supported!');\n            gutil.log(errors);\n            reject(errors);\n            return;\n          }\n          resolve(this.parseDOM(window,$));\n        }\n      });\n    });\n  }\n\n  /**\n   * Extract translations from html markup.\n   *\n   * @param window          a jsdom window\n   * @returns {Array}       extracted keys\n   */\n  parseDOM(window,$){\n    $ = $(window);\n    var keys = [];\n    var selector = `[${this.translation_attribute}]`;\n    var nodes = $(selector);\n\n    nodes.each(i=>{\n      var node = nodes.eq(i);\n      var value,key,m;\n\n      key = node.attr(this.translation_attribute);\n\n      var attr = \"text\";\n      //set default attribute to src if this is an image node\n      if(node[0].nodeName===\"IMG\") attr = \"src\";\n\n      var re = /\\[([a-z]*)]/g;\n      //check if a attribute was specified in the key\n      while ((m = re.exec(key)) !== null) {\n        if (m.index === re.lastIndex) {\n          re.lastIndex++;\n        }\n        if(m){\n          key = key.replace(m[0],'');\n          attr = m[1];\n        }\n      }\n\n      switch(node[0].nodeName){\n        case \"IMG\":\n          value = node.attr(this.image_src);\n          break;\n        default:\n          switch(attr){\n            case 'text':\n              value = node.text().trim();\n              break;\n            case 'prepend':\n              value = node.html().trim();\n              break;\n            case 'append':\n              value = node.html().trim();\n              break;\n            case 'html':\n              value = node.html().trim();\n              break;\n            default: //custom attribute\n              value = node.attr(attr);\n              break;\n          }\n      }\n\n      //skip keys with interpolations\n      if(key.indexOf(\"${\") > -1){\n        return;\n      }\n\n      // remove the backslash from escaped quotes\n      key = key.replace(/\\\\('|\")/g, '$1');\n\n      // remove the optional attribute\n      key = key.replace(/\\[[a-z]*]/g, '');\n\n      if(!key) key = value;\n      keys.push(key);\n      this.values[key] = value;\n      this.nodes[key] = node;\n    });\n\n    return keys;\n  }\n\n  /**\n   * Parse and add keys to the registry.\n   * @param keys\n   */\n  addToRegistry(keys){\n    for(let key of keys){\n      // remove the backslash from escaped quotes\n      key = key.replace(/\\\\('|\")/g, '$1');\n\n      if(key.indexOf(this.namespaceSeparator) === -1){\n        key = this.defaultNamespace + this.keySeparator + key;\n      }else{\n        key = key.replace(this.namespaceSeparator, this.keySeparator);\n      }\n\n      this.registry.push(key);\n    }\n  }\n\n  /**\n   * Generate translation files from the current registry entries.\n   *\n   * @param locale\n   */\n  generateTranslation(locale){\n\n    var mergedTranslations, currentTranslations, oldTranslations, key;\n\n    this.registryHash = {};\n\n    // turn the array of keys\n    // into an associative object\n    // ==========================\n    for(var i = 0, l = this.registry.length; i < l; i++){\n      key = this.registry[i];\n      this.registryHash = hashFromString(key, '', this.keySeparator, this.registryHash);\n    }\n\n    for(var namespace in this.registryHash){\n      if(!this.registryHash.hasOwnProperty(namespace)) continue;\n\n      // get previous version of the files\n      var namespacePath = namespace + '.json';\n      var namespaceOldPath = namespace + '_old.json';\n\n      if(fs.existsSync(namespacePath)){\n        try{\n          currentTranslations = JSON.parse(fs.readFileSync(namespacePath));\n        }catch(error){\n          this.emit('json_error', error.name, error.message);\n          currentTranslations = {};\n        }\n      }else{\n        currentTranslations = {};\n      }\n\n      if(fs.existsSync(namespaceOldPath)){\n        try{\n          oldTranslations = JSON.parse(fs.readFileSync(namespaceOldPath));\n        }\n        catch(error){\n          this.emit('json_error', error.name, error.message);\n          currentTranslations = {};\n        }\n      }\n      else{\n        oldTranslations = {};\n      }\n\n      // merges existing translations with the new ones\n      mergedTranslations = mergeHash(currentTranslations, Object.assign({}, this.registryHash[namespace]));\n\n      // restore old translations if the key is empty\n      mergedTranslations.new = replaceEmpty(oldTranslations, mergedTranslations.new);\n\n      var transform = null;\n      //transform values found in the html to uppercase if this is not the default language\n      if(locale !== this.defaultLocale) transform = \"uppercase\";\n\n      mergedTranslations.new = this.getValuesFromHash(this.valuesHash, mergedTranslations.new,transform,this.nodesHash,this.valuesHash);\n\n      // merges former old translations with the new ones\n      mergedTranslations.old = _.extend(oldTranslations, mergedTranslations.new);\n\n      // push files back to the stream\n      var mergedTranslationsFile = new File({\n        path: locale+\"/\"+namespacePath,\n        //base: locale,\n        contents: new Buffer(JSON.stringify(mergedTranslations.new, null, 2))\n      });\n      var mergedOldTranslationsFile = new File({\n        path: locale+\"/\"+namespaceOldPath,\n        //base: locale,\n        contents: new Buffer(JSON.stringify(mergedTranslations.old, null, 2))\n      });\n\n      /*if(this.verbose){\n        gutil.log('writing', locale+\"/\"+namespacePath);\n        gutil.log('writing', locale+\"/\"+namespaceOldPath);\n      }*/\n\n      this.stream.push(mergedTranslationsFile);\n      this.stream.push(mergedOldTranslationsFile);\n    }\n\n  }\n\n  /**\n   * Generate translations for all locales from the registry\n   */\n  generateAllTranslations(){\n    for(var i = 0, l = this.locales.length; i < l; i++){\n      this.generateTranslation(this.locales[i]);\n    }\n  }\n\n  /**\n   * Extract translations from the Aurelia app.\n   *\n   * @returns {Promise}\n   */\n  extractFromApp(){\n   return  this.extractor.getNavFromRoutes(this.routesModuleId)\n    .then(navItems=>{\n        if(!navItems) return null;\n\n        for(var i = 0, l = navItems.length; i < l; i++){\n          var item = navItems[i];\n          this.values[item.i18n] = item.title;\n          this.registry.push(this.defaultNamespace + this.keySeparator + item.i18n);\n        }\n\n        if(this.verbose){\n          gutil.log('navItems found:');\n          gutil.log(navItems)\n        }\n\n        return null;\n      });\n  }\n\n  /**\n   * Takes a `target` hash and replace its empty\n   * values with the `source` hash ones if they exist\n   *\n   * @param source\n   * @param target\n   * @param transform\n   * @param nodesHash\n   * @param valuesHash\n   * @returns {*|{}}\n   */\n  getValuesFromHash(source, target,transform,nodesHash,valuesHash){\n    target = target || {};\n\n    Object.keys(source).forEach((key)=>{\n\n      var node = null;\n      if(nodesHash) node = nodesHash[key];\n      var value;\n\n      if(target[key] !== undefined){\n        if(typeof source[key] === 'object'){\n          target[key] = this.getValuesFromHash(source[key], target[key], transform, node,(valuesHash)? valuesHash[key] : valuesHash);\n        }else if(target[key] === ''){\n          if(!node) {\n            //try to find in values\n            if(valuesHash)value = valuesHash[key];\n            if(transform === \"uppercase\") value = transformText(value);\n          }else{\n            value = source[key];\n            if(transform === \"uppercase\" && node[0].nodeName !== \"IMG\") value = transformText(value);\n          }\n          target[key] = value;\n        }\n      }\n    });\n\n    return target;\n  }\n\n  /**\n   * Get the file extension from a filepath.\n   *\n   * @param path        path to analyze\n   * @returns {string}  the extracted file extension\n   */\n  getExtension(path){\n    return path.substr(path.lastIndexOf(\".\") + 1);\n  }\n\n\n\n  //--------- Steam functions\n\n  transformFile(file, encoding, cb) {\n\n    var data,path;\n\n    // we do not handle streams\n    if (file.isStream()) {\n      this.emit('error', new PluginError(PLUGIN_NAME, 'Streams are not supported!'));\n      return cb();\n    }\n\n    //read the file manually if a filepath was passed.\n    if(file.isNull()){\n      path = file.path;\n      if(file.stat.isDirectory()){\n        return cb();\n      }else if(path && fs.existsSync(path)){\n        data = fs.readFileSync(path);\n      }else{\n        this.emit(\"error\", new PluginError(PLUGIN_NAME, \"File has no content and is not readable\"));\n        return cb();\n      }\n    }\n\n    if (file.isBuffer()) {\n      path = file.path.replace(process.cwd()+\"/\",\"\");\n      data = file.contents.toString();\n    }\n\n    //skip if no data was found\n    if(!data) return cb();\n\n    data = this.parseTranslations(path,data).then(keys=>{\n      this.addToRegistry(keys);\n      // tell the stream engine that we are done with this file\n      cb();\n    });\n\n    // make sure the file goes through the next gulp plugin\n    //this.push(file);\n  }\n\n  flush(cb){\n    if(this.verbose) {\n      gutil.log('extracted registry:');\n      gutil.log(this.registry);\n    }\n\n    this.translationsHash = {};\n    this.valuesHash = {};\n    this.nodesHash = {};\n\n    var key,i,l;\n\n    // remove duplicate keys\n    this.translations = _.uniq(this.translations).sort();\n\n    //create hash for values\n    for(key in this.values){\n      if(!this.values.hasOwnProperty(key)) continue;\n      this.valuesHash = hashFromString(key, this.values[key], this.keySeparator, this.valuesHash);\n    }\n    //create hash for nodes\n    for(key in this.nodes){\n      if(!this.nodes.hasOwnProperty(key)) continue;\n      this.nodesHash = hashFromString(key, this.nodes[key], this.keySeparator, this.nodesHash);\n    }\n\n    //extract values from the aurelia application where possible\n    if(this.extractor){\n      this.extractFromApp().then(()=>{\n        this.generateAllTranslations();\n        cb();\n      });\n    }else{\n      this.generateAllTranslations();\n      cb();\n    }\n\n  }\n}\n\n/**\n * The main plugin function\n *\n * @param opts\n * @returns {Stream}\n */\nexport function i18next(opts) {\n  return new Parser(opts).parse();\n}\n"],"sourceRoot":"/source/"}
{"version":3,"sources":["app-extractor.js"],"names":[],"mappings":";qDAOI,OAAO,EAEE,YAAY;;;;;;;;;;;;;;;AAFrB,aAAO,GAAG,MAAM,CAAC,OAAO;;AAEf,kBAAY;AAKZ,iBALA,YAAY,CAKX,OAAO,EAAC;gCALT,YAAY;;AAMrB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;SACxB;;qBAPU,YAAY;;iBAgBP,0BAAC,QAAQ,EAAC;;AAIxB,kBAAM,CAAC,MAAM,CAAC;AACZ,uBAAW,IAAI;AACf,0BAAc,OAAO;AACrB,4BAAgB;AACd,uBAAS,CAAC;eACX;AACD,qBAAQ;AACN,mBAAG,EAAE,IAAI,CAAC,OAAO,GAAC,OAAO;eAC1B;aACF,CAAC,CAAC;;AAEH,gBAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;AAEpC,mBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACtC,qBAAO,MAAM,UAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,EAAE;AACrC,oBAAI,SAAS,GAAG,EAAE,CAAC;AACnB,qBAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAC;AAC7C,sBAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,sBAAG,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACrC;AACD,uBAAO,CAAC,SAAS,CAAC,CAAC;eACpB,CAAC,CAAC;aACJ,CAAC,CAAC;WAGJ;;;eA7CU,YAAY;;;8BAAZ,YAAY","file":"app-extractor.js","sourceRoot":"/source/","sourcesContent":["import System from \"systemjs\";\n\nimport \"config\";\nimport \"babel/polyfill\";\nimport \"core-js\";\n\nimport corejs from \"core-js\";\nvar Promise = corejs.Promise;\n\nexport class AppExtractor{\n\n  /**\n   * Configure systemjs to work with the local application\n   */\n  constructor(appPath){\n    this.appPath = appPath;\n  }\n\n  /**\n   * Gets the routes from a module.\n   * The module should export the routes array as a variable.\n   *\n   * @param moduleId    id of the module to load.\n   * @returns {Promise}\n   */\n  getNavFromRoutes(moduleId){\n\n    //prepare for use in windows\n\n    System.config({\n      \"baseURL\": \"./\",\n      \"transpiler\": 'babel',\n      \"babelOptions\": {\n        \"stage\": 0\n      },\n      \"paths\":{\n        \"*\": this.appPath+\"/*.js\"\n      }\n    });\n\n    if(!moduleId) Promise.resolve(null);\n    //get routes from the aurelia application\n    return new Promise((resolve, reject) => {\n      return System.import(moduleId).then(m=>{\n        var navRoutes = [];\n        for(var i = 0, l = m.routes.length; i < l; i++){\n          var route = m.routes[i];\n          if(route.nav) navRoutes.push(route);\n        }\n        resolve(navRoutes);\n      });\n    });\n\n\n  }\n}\n"]}
{"version":3,"sources":["helpers.js"],"names":[],"mappings":"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","file":"helpers.js","sourcesContent":["\nexport function hashFromString(path, value, separator, hash){\n  separator = separator || '.';\n\n  if(path.indexOf(separator, path.length - separator.length) >= 0){\n    path = path.slice(0, -separator.length);\n  }\n\n  var parts = path.split(separator);\n  var tmp_obj = hash || {};\n  var obj = tmp_obj;\n\n  for(var x = 0; x < parts.length; x++){\n    if(x === parts.length - 1){\n      tmp_obj[parts[x]] = value;\n    }\n    else if(!tmp_obj[parts[x]]){\n      tmp_obj[parts[x]] = {};\n    }\n    tmp_obj = tmp_obj[parts[x]];\n  }\n  return obj;\n}\n\n\n// Takes a `source` hash and make sure its value\n// are pasted in the `target` hash, if the target\n// hash has the corresponding key. If not, the\n// value is added to an `old` hash.\nexport function mergeHash(source, target, old){\n  target = target || {};\n  old = old || {};\n\n  Object.keys(source).forEach(function(key){\n    if(target[key] !== undefined){\n      if(typeof source[key] === 'object' && source[key].constructor !== Array){\n        var nested = mergeHash(source[key], target[key], old[key]);\n        target[key] = nested.new;\n        old[key] = nested.old;\n      }\n      else{\n        target[key] = source[key];\n      }\n    }\n    else{\n      // support for plural in keys\n      var pluralMatch = /_plural(_\\d+)?$/.test(key);\n      var singularKey = key.replace(/_plural(_\\d+)?$/, '');\n\n      // support for context in keys\n      var contextMatch = /_([^_]+)?$/.test(singularKey);\n      var rawKey = singularKey.replace(/_([^_]+)?$/, '');\n\n      if(\n        ( contextMatch && target[rawKey] !== undefined ) ||\n        ( pluralMatch && target[singularKey] !== undefined )\n      ){\n        target[key] = source[key];\n      }\n      else{\n        old[key] = source[key];\n      }\n    }\n  });\n\n  return {\n    'new': target,\n    'old': old\n  };\n}\n\n\n// Takes a `target` hash and replace its empty\n// values with the `source` hash ones if they exist\nexport function replaceEmpty(source, target,transform){\n  target = target || {};\n\n  Object.keys(source).forEach(function(key){\n    if(target[key] !== undefined){\n      if(typeof source[key] === 'object'){\n        target[key] = replaceEmpty(source[key], target[key],transform);\n      }\n      else if(target[key] === ''){\n\n        var value = source[key];\n\n        if(transform===\"uppercase\") value = transformText(value);\n\n        target[key] = value;\n      }\n    }\n  });\n\n  return target;\n}\n\nexport function transformText(str){\n  var re = /(.*?(?=<)).*?(?=>)>|(.*)?/gim;\n  var m;\n\n  while ((m = re.exec(str)) !== null) {\n    if (m.index === re.lastIndex) {\n      re.lastIndex++;\n    }\n    // View your result using the m-variable.\n    // eg m[0] etc.\n    if(m[1]) str = str.replace(m[1],m[1].toUpperCase());\n    if(m[2]) str = str.replace(m[2],m[2].toUpperCase());\n    //console.log(m[0]);\n  }\n  return str;\n}\n\n// (.*?(?=>)>)?(.*?(?=<\\/)(.*?(?=>)>))?\n\n//MATCH TAGS: (<\\/?[a-z][a-z0-9]*[^<>]*>)\n//MATCH TAGS: (<\\/?[a-z][a-z0-9]*[^<>]*>)\n\n//match all but tags : (.*?(?=<)).*?(?=>)>|(.*)?\n"],"sourceRoot":"/source/"}